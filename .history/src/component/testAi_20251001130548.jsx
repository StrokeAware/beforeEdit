import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * Form Voice Assistant (no backend required)
 * - ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå/‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ TTS
 * - ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î (STT) ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * - ‡∏õ‡∏∏‡πà‡∏° Next/Prev ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠, Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á, Hotkeys: R=Read, M=Mic, S=Stop
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏™‡∏•‡∏±‡∏ö lang ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ö‡∏ô)
 *
 * NOTE: ‡πÉ‡∏ä‡πâ Web Speech API (Chrome/Edge ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
 */

const defaultFields = [
  { id: "fullName", labelTH: "‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is your full name?", placeholder: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• / Type your full name" },
  { id: "age", labelTH: "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏µ‡πà‡∏õ‡∏µ?", labelEN: "How old are you?", placeholder: "‡πÄ‡∏ä‡πà‡∏ô 17" },
  { id: "school", labelTH: "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏î?", labelEN: "Which school are you studying at?", placeholder: "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
  { id: "project", labelTH: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô/‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is the title of your project?", placeholder: "‡πÄ‡∏ä‡πà‡∏ô StrokeSight" },
  { id: "goal", labelTH: "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is the main goal of your project?", placeholder: "‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ" },
];

export default function App() {
  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 p-6">
      <div className="max-w-3xl mx-auto">
        <h1 className="text-2xl font-bold mb-2">Form Voice Assistant</h1>
        <p className="mb-6 text-sm text-gray-600">
          ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î (Web Speech API). ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Chrome/Edge ‡∏ö‡∏ô‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ
        </p>
        <FormWithVoice fields={defaultFields} />
      </div>
    </div>
  );
}

function FormWithVoice({ fields }) {
  const [lang, setLang] = useState("th-TH");
  const [answers, setAnswers] = useState(() => Object.fromEntries(fields.map(f => [f.id, ""])));
  const [index, setIndex] = useState(0);
  const [listening, setListening] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  const [autoAdvance, setAutoAdvance] = useState(true);
  const [appendMode, setAppendMode] = useState(true); // true = ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢, false = ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà

  const synth = useRef(window.speechSynthesis);
  const recRef = useRef(null);
  const inputRefs = useRef({});

  const currentField = fields[index];
  const displayLabel = useMemo(() =>
    lang === "th-TH" ? currentField.labelTH : currentField.labelEN,
  [lang, currentField]);

  useEffect(() => {
    // ‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏î Hotkeys: R=Read, M=Mic, S=Stop, ArrowLeft/Right=Prev/Next
    const onKey = (e) => {
      if (e.altKey || e.ctrlKey || e.metaKey) return;
      if (e.key.toLowerCase() === "r") readQuestion();
      if (e.key.toLowerCase() === "m") toggleMic();
      if (e.key.toLowerCase() === "s") stopAll();
      if (e.key === "ArrowRight") next();
      if (e.key === "ArrowLeft") prev();
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [index, lang, answers, listening, speaking]);

  const focusInput = (id) => {
    const el = inputRefs.current[id];
    if (el) el.focus();
  };

  const speak = (text) => {
    if (!("speechSynthesis" in window)) return;
    try {
      synth.current.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.lang = lang;
      u.rate = 1;
      u.onstart = () => setSpeaking(true);
      u.onend = () => setSpeaking(false);
      synth.current.speak(u);
    } catch (e) {
      console.warn("TTS error", e);
    }
  };

  const readQuestion = () => {
    stopMic();
    speak(displayLabel);
  };

  const ensureRecognizer = () => {
    if (!("webkitSpeechRecognition" in window)) return null;
    if (recRef.current) return recRef.current;
    const rec = new window.webkitSpeechRecognition();
    rec.lang = lang; // "th-TH" or "en-US"
    rec.interimResults = true;
    rec.continuous = false; // ‡∏à‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö/‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    rec.onstart = () => setListening(true);
    rec.onerror = () => setListening(false);
    rec.onend = () => setListening(false);
    rec.onresult = (e) => {
      let finalText = "";
      let interim = "";
      for (let i = e.resultIndex; i < e.results.length; i++) {
        const chunk = e.results[i][0].transcript;
        if (e.results[i].isFinal) finalText += chunk;
        else interim += chunk;
      }
      const text = (finalText || interim || "").trim();
      if (!text) return;
      setAnswers(prev => ({
        ...prev,
        [currentField.id]: appendMode && prev[currentField.id]
          ? (prev[currentField.id] + (prev[currentField.id].endsWith(" ") ? "" : " ") + text)
          : text
      }));
    };
    recRef.current = rec;
    return rec;
  };

  const startMic = () => {
    stopTTS();
    const rec = ensureRecognizer();
    if (!rec) {
      alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Chrome/Edge)");
      return;
    }
    try {
      rec.start();
    } catch {}
  };

  const stopMic = () => {
    try { recRef.current && recRef.current.stop(); } catch {}
  };

  const stopTTS = () => {
    try { synth.current && synth.current.cancel(); } catch {}
  };

  const stopAll = () => { stopMic(); stopTTS(); };

  const toggleMic = () => {
    if (listening) stopMic();
    else startMic();
  };

  const prev = () => {
    stopAll();
    setIndex(i => Math.max(0, i - 1));
    setTimeout(() => focusInput(fields[Math.max(0, index - 1)].id), 0);
  };

  const next = () => {
    stopAll();
    setIndex(i => {
      const ni = Math.min(fields.length - 1, i + 1);
      setTimeout(() => focusInput(fields[ni].id), 0);
      return ni;
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    stopAll();
    // ‡πÄ‡∏î‡πÇ‡∏°: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô console / ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ backend ‡πÑ‡∏î‡πâ
    console.log("Submitted:", answers);
    alert("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏î‡∏π‡πÉ‡∏ô console ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞");
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  useEffect(() => {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠ (‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ)
    speak(displayLabel);
    focusInput(currentField.id);
  }, [index, lang]);

  // Auto-advance ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    if (!autoAdvance) return;
    // ‡∏ñ‡πâ‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    if (!listening && answers[currentField.id]) {
      const t = setTimeout(() => {
        if (index < fields.length - 1) next();
      }, 400);
      return () => clearTimeout(t);
    }
  }, [answers, listening, index]);

  return (
    <form onSubmit={handleSubmit} className="bg-white rounded-2xl shadow p-5">
      {/* ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ö‡∏ô */}
      <div className="flex flex-wrap items-center gap-3 mb-4">
        <LangSelect lang={lang} setLang={setLang} />
        <Toggle label="‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (Append)" checked={appendMode} onChange={setAppendMode} />
        <Toggle label="‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" checked={autoAdvance} onChange={setAutoAdvance} />
        <div className="ml-auto flex items-center gap-2">
          <button type="button" onClick={readQuestion} className="px-3 py-2 rounded-lg border">
            üîà ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå (R)
          </button>
          <button type="button" onClick={toggleMic} className={`px-3 py-2 rounded-lg border ${listening ? "bg-green-100" : ""}`}>
            {listening ? "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á (M)" : "üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á (M)"}
          </button>
          <button type="button" onClick={stopAll} className="px-3 py-2 rounded-lg border">
            ‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (S)
          </button>
        </div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå */}
      <div className="space-y-5">
        {fields.map((f, i) => (
          <div key={f.id} className={`p-4 rounded-xl border ${i === index ? "border-blue-400 bg-blue-50" : "border-gray-200"}`}>
            <label htmlFor={f.id} className="block font-medium mb-1">
              {lang === "th-TH" ? f.labelTH : f.labelEN}
            </label>
            <div className="flex gap-2">
              <input
                ref={(el) => (inputRefs.current[f.id] = el)}
                id={f.id}
                value={answers[f.id]}
                onChange={(e) => setAnswers((prev) => ({ ...prev, [f.id]: e.target.value }))}
                placeholder={f.placeholder}
                className="flex-1 px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring focus:ring-blue-200"
              />
              {i === index && (
                <div className="flex gap-2">
                  <IconBtn title="‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå" onClick={readQuestion}>üîà</IconBtn>
                  <IconBtn title={listening ? "‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á" : "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á"} onClick={toggleMic}>{listening ? "üõë" : "üéôÔ∏è"}</IconBtn>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á */}
      <div className="flex items-center gap-3 mt-6">
        <button type="button" onClick={prev} disabled={index === 0} className="px-4 py-2 rounded-lg border disabled:opacity-50">‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</button>
        <span className="text-sm text-gray-600">‡∏Ç‡πâ‡∏≠ {index + 1} / {fields.length}</span>
        <button type="button" onClick={next} disabled={index === fields.length - 1} className="px-4 py-2 rounded-lg border disabled:opacity-50">‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è</button>
        <div className="ml-auto" />
        <button type="submit" className="px-5 py-2 rounded-lg bg-blue-600 text-white">‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° (Enter)</button>
      </div>

      {/* ‡∏ó‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ */}
      <div className="mt-4 text-xs text-gray-500 leading-relaxed">
        <p>Tips: ‡∏Å‡∏î <kbd className="px-1 border rounded">R</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå, <kbd className="px-1 border rounded">M</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á, <kbd className="px-1 border rounded">S</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î.</p>
      </div>
    </form>
  );
}

function IconBtn({ onClick, title, children }) {
  return (
    <button type="button" onClick={onClick} title={title} className="px-3 py-2 rounded-lg border bg-white hover:bg-gray-50">
      {children}
    </button>
  );
}

function Toggle({ label, checked, onChange }) {
  return (
    <label className="flex items-center gap-2 text-sm select-none">
      <input type="checkbox" checked={checked} onChange={(e) => onChange(e.target.checked)} />
      {label}
    </label>
  );
}

function LangSelect({ lang, setLang }) {
  return (
    <div className="flex items-center gap-2 text-sm">
      <span className="text-gray-600">Language</span>
      <select value={lang} onChange={(e) => setLang(e.target.value)} className="px-2 py-1 border rounded-lg">
        <option value="th-TH">‡πÑ‡∏ó‡∏¢ (th-TH)</option>
        <option value="en-US">English (en-US)</option>
      </select>
    </div>
  );
}
