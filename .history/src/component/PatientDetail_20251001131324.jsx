import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * Form Voice Assistant (no backend required)
 * - ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå/‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ TTS
 * - ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î (STT) ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * - ‡∏õ‡∏∏‡πà‡∏° Next/Prev ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠, Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á, Hotkeys: R=Read, M=Mic, S=Stop
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏™‡∏•‡∏±‡∏ö lang ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ö‡∏ô)
 *
 * NOTE: ‡πÉ‡∏ä‡πâ Web Speech API (Chrome/Edge ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
 */

const defaultFields = [
  { id: "fullName", labelTH: "‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is your full name?", placeholder: "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• / Type your full name" },
  { id: "age", labelTH: "‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏µ‡πà‡∏õ‡∏µ?", labelEN: "How old are you?", placeholder: "‡πÄ‡∏ä‡πà‡∏ô 17" },
  { id: "school", labelTH: "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏î?", labelEN: "Which school are you studying at?", placeholder: "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤" },
  { id: "project", labelTH: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô/‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is the title of your project?", placeholder: "‡πÄ‡∏ä‡πà‡∏ô StrokeSight" },
  { id: "goal", labelTH: "‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", labelEN: "What is the main goal of your project?", placeholder: "‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ" },
];

export default function App() {
  return (
    <div className="min-h-screen bg-gray-50 text-gray-900 p-6">
      <div className="max-w-3xl mx-auto">
        <h1 className="text-2xl font-bold mb-2">Form Voice Assistant</h1>
        <p className="mb-6 text-sm text-gray-600">
          ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î (Web Speech API). ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Chrome/Edge ‡∏ö‡∏ô‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ
        </p>
        <FormWithVoice fields={defaultFields} />
      </div>
    </div>
  );
}

function FormWithVoice({ fields }) {
  const [lang, setLang] = useState("th-TH");
  const [answers, setAnswers] = useState(() => Object.fromEntries(fields.map(f => [f.id, ""])));
  const [index, setIndex] = useState(0);
  const [listening, setListening] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  const [autoAdvance, setAutoAdvance] = useState(true);
  const [appendMode, setAppendMode] = useState(true); // true = ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢, false = ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà

  const synth = useRef(window.speechSynthesis);
  const recRef = useRef(null);
  const inputRefs = useRef({});

  const currentField = fields[index];
  const displayLabel = useMemo(() =>
    lang === "th-TH" ? currentField.labelTH : currentField.labelEN,
  [lang, currentField]);

  useEffect(() => {
    // ‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏î Hotkeys: R=Read, M=Mic, S=Stop, ArrowLeft/Right=Prev/Next
    const onKey = (e) => {
      if (e.altKey || e.ctrlKey || e.metaKey) return;
      if (e.key.toLowerCase() === "r") readQuestion();
      if (e.key.toLowerCase() === "m") toggleMic();
      if (e.key.toLowerCase() === "s") stopAll();
      if (e.key === "ArrowRight") next();
      if (e.key === "ArrowLeft") prev();
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [index, lang, answers, listening, speaking]);

  const focusInput = (id) => {
    const el = inputRefs.current[id];
    if (el) el.focus();
  };

  const speak = (text) => {
    if (!("speechSynthesis" in window)) return;
    try {
      synth.current.cancel();
      const u = new SpeechSynthesisUtterance(text);
      u.lang = lang;
      u.rate = 1;
      u.onstart = () => setSpeaking(true);
      u.onend = () => setSpeaking(false);
      synth.current.speak(u);
    } catch (e) {
      console.warn("TTS error", e);
    }
  };

  const readQuestion = () => {
    stopMic();
    speak(displayLabel);
  };

  const ensureRecognizer = () => {
    if (!("webkitSpeechRecognition" in window)) return null;
    if (recRef.current) return recRef.current;
    const rec = new window.webkitSpeechRecognition();
    rec.lang = lang; // "th-TH" or "en-US"
    rec.interimResults = true;
    rec.continuous = false; // ‡∏à‡∏ö‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö/‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    rec.onstart = () => setListening(true);
    rec.onerror = () => setListening(false);
    rec.onend = () => setListening(false);
    rec.onresult = (e) => {
      let finalText = "";
      let interim = "";
      for (let i = e.resultIndex; i < e.results.length; i++) {
        const chunk = e.results[i][0].transcript;
        if (e.results[i].isFinal) finalText += chunk;
        else interim += chunk;
      }
      const text = (finalText || interim || "").trim();
      if (!text) return;
      setAnswers(prev => ({
        ...prev,
        [currentField.id]: appendMode && prev[currentField.id]
          ? (prev[currentField.id] + (prev[currentField.id].endsWith(" ") ? "" : " ") + text)
          : text
      }));
    };
    recRef.current = rec;
    return rec;
  };

  const startMic = () => {
    stopTTS();
    const rec = ensureRecognizer();
    if (!rec) {
      alert("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Chrome/Edge)");
      return;
    }
    try {
      rec.start();
    } catch {}
  };

  const stopMic = () => {
    try { recRef.current && recRef.current.stop(); } catch {}
  };

  const stopTTS = () => {
    try { synth.current && synth.current.cancel(); } catch {}
  };

  const stopAll = () => { stopMic(); stopTTS(); };

  const toggleMic = () => {
    if (listening) stopMic();
    else startMic();
  };

  const prev = () => {
    stopAll();
    setIndex(i => Math.max(0, i - 1));
    setTimeout(() => focusInput(fields[Math.max(0, index - 1)].id), 0);
  };

  const next = () => {
    stopAll();
    setIndex(i => {
      const ni = Math.min(fields.length - 1, i + 1);
      setTimeout(() => focusInput(fields[ni].id), 0);
      return ni;
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    stopAll();
    // ‡πÄ‡∏î‡πÇ‡∏°: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô console / ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ backend ‡πÑ‡∏î‡πâ
    console.log("Submitted:", answers);
    alert("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏î‡∏π‡πÉ‡∏ô console ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞");
  };

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  useEffect(() => {
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠ (‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ)
    speak(displayLabel);
    focusInput(currentField.id);
  }, [index, lang]);

  // Auto-advance ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
  useEffect(() => {
    if (!autoAdvance) return;
    // ‡∏ñ‡πâ‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ï‡πà‡∏≠
    if (!listening && answers[currentField.id]) {
      const t = setTimeout(() => {
        if (index < fields.length - 1) next();
      }, 400);
      return () => clearTimeout(t);
    }
  }, [answers, listening, index]);

  return (
    <form onSubmit={handleSubmit} className="bg-white rounded-2xl shadow p-5">
      {/* ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ö‡∏ô */}
      <div className="flex flex-wrap items-center gap-3 mb-4">
        <LangSelect lang={lang} setLang={setLang} />
        <Toggle label="‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (Append)" checked={appendMode} onChange={setAppendMode} />
        <Toggle label="‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" checked={autoAdvance} onChange={setAutoAdvance} />
        <div className="ml-auto flex items-center gap-2">
          <button type="button" onClick={readQuestion} className="px-3 py-2 rounded-lg border">
            üîà ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå (R)
          </button>
          <button type="button" onClick={toggleMic} className={`px-3 py-2 rounded-lg border ${listening ? "bg-green-100" : ""}`}>
            {listening ? "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á (M)" : "üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á (M)"}
          </button>
          <button type="button" onClick={stopAll} className="px-3 py-2 rounded-lg border">
            ‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (S)
          </button>
        </div>
      </div>

      {/* ‡∏ï‡∏±‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå */}
      <div className="space-y-5">
        {fields.map((f, i) => (
          <div key={f.id} className={`p-4 rounded-xl border ${i === index ? "border-blue-400 bg-blue-50" : "border-gray-200"}`}>
            <label htmlFor={f.id} className="block font-medium mb-1">
              {lang === "th-TH" ? f.labelTH : f.labelEN}
            </label>
            <div className="flex gap-2">
              <input
                ref={(el) => (inputRefs.current[f.id] = el)}
                id={f.id}
                value={answers[f.id]}
                onChange={(e) => setAnswers((prev) => ({ ...prev, [f.id]: e.target.value }))}
                placeholder={f.placeholder}
                className="flex-1 px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring focus:ring-blue-200"
              />
              {i === index && (
                <div className="flex gap-2">
                  <IconBtn title="‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå" onClick={readQuestion}>üîà</IconBtn>
                  <IconBtn title={listening ? "‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á" : "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á"} onClick={toggleMic}>{listening ? "üõë" : "üéôÔ∏è"}</IconBtn>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á */}
      <div className="flex items-center gap-3 mt-6">
        <button type="button" onClick={prev} disabled={index === 0} className="px-4 py-2 rounded-lg border disabled:opacity-50">‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</button>
        <span className="text-sm text-gray-600">‡∏Ç‡πâ‡∏≠ {index + 1} / {fields.length}</span>
        <button type="button" onClick={next} disabled={index === fields.length - 1} className="px-4 py-2 rounded-lg border disabled:opacity-50">‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è</button>
        <div className="ml-auto" />
        <button type="submit" className="px-5 py-2 rounded-lg bg-blue-600 text-white">‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° (Enter)</button>
      </div>

      {/* ‡∏ó‡∏¥‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ */}
      <div className="mt-4 text-xs text-gray-500 leading-relaxed">
        <p>Tips: ‡∏Å‡∏î <kbd className="px-1 border rounded">R</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå, <kbd className="px-1 border rounded">M</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á, <kbd className="px-1 border rounded">S</kbd> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î.</p>
      </div>
    </form>
  );
}

function IconBtn({ onClick, title, children }) {
  return (
    <button type="button" onClick={onClick} title={title} className="px-3 py-2 rounded-lg border bg-white hover:bg-gray-50">
      {children}
    </button>
  );
}

function Toggle({ label, checked, onChange }) {
  return (
    <label className="flex items-center gap-2 text-sm select-none">
      <input type="checkbox" checked={checked} onChange={(e) => onChange(e.target.checked)} />
      {label}
    </label>
  );
}

function LangSelect({ lang, setLang }) {
  return (
    <div className="flex items-center gap-2 text-sm">
      <span className="text-gray-600">Language</span>
      <select value={lang} onChange={(e) => setLang(e.target.value)} className="px-2 py-1 border rounded-lg">
        <option value="th-TH">‡πÑ‡∏ó‡∏¢ (th-TH)</option>
        <option value="en-US">English (en-US)</option>
      </select>
    </div>
  );
}


// ===============================
//  ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô ‚ÄúAI ‡∏à‡∏£‡∏¥‡∏á‚Äù (‡∏°‡∏µ Backend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM)
// ===============================
// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
// ai-form/
// ‚îú‚îÄ server/           ‚Üê Node.js (Express) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ LLM ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
// ‚îÇ  ‚îú‚îÄ .env           ‚Üê ‡πÄ‡∏Å‡πá‡∏ö API_KEY
// ‚îÇ  ‚îî‚îÄ server.js
// ‚îî‚îÄ web/              ‚Üê React Frontend (Vite)
//    ‚îú‚îÄ index.html
//    ‚îî‚îÄ src/
//       ‚îú‚îÄ main.jsx
//       ‚îú‚îÄ App.jsx
//       ‚îî‚îÄ api.js

// ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏±‡πâ‡∏ô‡πÜ
// 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ai-form ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏¢‡∏Å server/ ‡∏Å‡∏±‡∏ö web/
// 2) ‡∏ù‡∏±‡πà‡∏á server: npm init -y && npm i express cors node-fetch dotenv
// 3) ‡∏ù‡∏±‡πà‡∏á web: npm create vite@latest web -- --template react && cd web && npm i
// 4) ‡∏£‡∏±‡∏ô server: node server.js  (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ nodemon)
// 5) ‡∏£‡∏±‡∏ô web: npm run dev
// 6) ‡πÄ‡∏õ‡∏¥‡∏î http://localhost:5173 (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà Vite ‡πÅ‡∏à‡πâ‡∏á)

// -------------------------------
// server/.env (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
// -------------------------------
// LLM_API_KEY=‡πÉ‡∏™‡πà‡∏Ñ‡∏µ‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
// LLM_MODEL=gpt-4o-mini   // ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
// PORT=3001
//
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏≠‡∏¢‡πà‡∏≤‡∏ù‡∏±‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà .env ‡∏ù‡∏±‡πà‡∏á server

// -------------------------------
// server/server.js
// -------------------------------
import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3001;
const LLM_API_KEY = process.env.LLM_API_KEY;
const LLM_MODEL = process.env.LLM_MODEL || 'gpt-4o-mini';

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: endpoint ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LLM ‡πÅ‡∏ö‡∏ö Non-Streaming (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
app.post('/api/ai', async (req, res) => {
  try {
    const { prompt, system, temperature = 0.7 } = req.body;

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Chat Completions ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢)
    const resp = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LLM_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: LLM_MODEL,
        temperature,
        messages: [
          system ? { role: 'system', content: system } : undefined,
          { role: 'user', content: prompt }
        ].filter(Boolean)
      })
    });

    const data = await resp.json();
    const text = data?.choices?.[0]?.message?.content || '';
    res.json({ text });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'AI request failed' });
  }
});

// (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Streaming: ‡∏ó‡∏≥ endpoint ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö SSE/WebSocket ‡πÑ‡∏î‡πâ)

app.listen(PORT, () => console.log(`AI server on http://localhost:${PORT}`));


// -------------------------------
// web/src/api.js
// -------------------------------
export async function askAI({ prompt, system, temperature }) {
  const resp = await fetch('http://localhost:3001/api/ai', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ prompt, system, temperature })
  });
  if (!resp.ok) throw new Error('AI server error');
  return resp.json();
}


// -------------------------------
// web/src/App.jsx  (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ‚ÄúAI ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÜ‚Äù ‡∏•‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
// -------------------------------
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { askAI } from './api';

const fields = [
  { id: 'fullName', labelTH: '‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?', labelEN: 'What is your full name?', placeholder: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‚Äì‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' },
  { id: 'age', labelTH: '‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏µ‡πà‡∏õ‡∏µ?', labelEN: 'How old are you?', placeholder: '‡πÄ‡∏ä‡πà‡∏ô 17' },
  { id: 'school', labelTH: '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏î?', labelEN: 'Which school are you studying at?', placeholder: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
  { id: 'project', labelTH: '‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô/‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?', labelEN: 'What is the title of your project?', placeholder: '‡πÄ‡∏ä‡πà‡∏ô StrokeSight' },
  { id: 'goal', labelTH: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?', labelEN: 'What is the main goal of your project?', placeholder: '‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÜ' }
];

export default function App() {
  const [lang, setLang] = useState('th-TH');
  const [answers, setAnswers] = useState(() => Object.fromEntries(fields.map(f => [f.id, ''])));
  const [index, setIndex] = useState(0);
  const [loading, setLoading] = useState(false);
  const [listening, setListening] = useState(false);

  const synth = useRef(window.speechSynthesis);
  const recRef = useRef(null);

  const current = fields[index];
  const label = useMemo(() => lang === 'th-TH' ? current.labelTH : current.labelEN, [lang, current]);

  const speak = (text) => {
    if (!('speechSynthesis' in window)) return;
    const u = new SpeechSynthesisUtterance(text);
    u.lang = lang;
    synth.current.cancel();
    synth.current.speak(u);
  };

  const readQuestion = () => speak(label);

  const ensureRec = () => {
    if (!('webkitSpeechRecognition' in window)) return null;
    if (recRef.current) return recRef.current;
    const rec = new window.webkitSpeechRecognition();
    rec.lang = lang;
    rec.continuous = false;
    rec.interimResults = false;
    rec.onstart = () => setListening(true);
    rec.onend = () => setListening(false);
    rec.onresult = (e) => {
      const text = e.results[0][0].transcript;
      setAnswers((p) => ({ ...p, [current.id]: (p[current.id] ? p[current.id] + ' ' : '') + text }));
    };
    recRef.current = rec;
    return rec;
  };

  const startMic = () => {
    const rec = ensureRec();
    if (!rec) return alert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö STT');
    try { rec.start(); } catch {}
  };

  const aiDraftOne = async (field) => {
    setLoading(true);
    try {
      // ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°/‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
      const context = Object.entries(answers)
        .filter(([id, v]) => !!v)
        .map(([id, v]) => `- ${id}: ${v}`)
       .join('
');

      const question = (lang === 'th-TH' ? field.labelTH : field.labelEN);

      const systemPrompt = lang === 'th-TH'
        ? '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏™‡∏±‡πâ‡∏ô ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'
        : 'You are a helpful form-filling assistant. Answer concisely in 1‚Äì2 lines. Return plain text only.';

      const userPrompt = `${lang === 'th-TH' ? '‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' : 'Current answers so far'}:
${context || '- (none)'}

${lang === 'th-TH' ? '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°' : 'Question'}: ${question}
${lang === 'th-TH' ? '‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : 'Please draft a suitable answer.'}`;

      const { text } = await askAI({ prompt: userPrompt, system: systemPrompt, temperature: 0.5 });

      setAnswers((p) => ({ ...p, [field.id]: (p[field.id] ? p[field.id] + ' ' : '') + (text || '').trim() }));
      speak((text || '').trim());
    } catch (e) {
      alert('AI ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setLoading(false);
    }
  };

  const aiDraftAll = async () => {
    setLoading(true);
    try {
      const formSpec = fields.map((f) => `- id: ${f.id}
  label: ${lang === 'th-TH' ? f.labelTH : f.labelEN}`).join('
');
      const context = Object.entries(answers).map(([id, v]) => `- ${id}: ${v || ''}`).join('
');
      const systemPrompt = lang === 'th-TH'
        ? '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô ‡πÅ‡∏ï‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏±‡∏ò‡∏¢‡∏° ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô plain text JSON ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢'
        : 'You are a helpful assistant that fills forms. Keep answers concise and realistic for a high-school student. Output easy-to-read JSON only.';

      const userPrompt = `${lang === 'th-TH' ? '‡∏™‡∏Ñ‡∏µ‡∏°‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°' : 'Form schema'}:
${formSpec}

${lang === 'th-TH' ? '‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà' : 'Current answers'}:
${context}

${lang === 'th-TH' ? '‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠' : 'Please fill all fields, keep existing values, and complete missing ones.'}
${lang === 'th-TH' ? '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï' : 'Output format'}: {"fullName":"...","age":"...", ... }`;

      const { text } = await askAI({ prompt: userPrompt, system: systemPrompt, temperature: 0.4 });

      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse JSON ‡∏ó‡∏µ‡πà AI ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡∏à‡∏∞‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏±‡∏ö ,/‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
      try {
        const cleaned = text.trim().replace(/```json|```/g, '');
        const obj = JSON.parse(cleaned);
        setAnswers((p) => ({ ...p, ...obj }));
      } catch {
        // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡πá‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ô‡πâ‡∏ï
        setAnswers((p) => ({ ...p, goal: (p.goal ? p.goal + ' ' : '') + text }));
      }
    } catch (e) {
      alert('AI ‡πÄ‡∏ï‡∏¥‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 720, margin: '0 auto', padding: 16, fontFamily: 'system-ui' }}>
      <h2>AI Form Assistant</h2>
      <div style={{ display: 'flex', gap: 8, alignItems: 'center', marginBottom: 12 }}>
        <label>Language: </label>
        <select value={lang} onChange={(e) => setLang(e.target.value)}>
          <option value='th-TH'>‡πÑ‡∏ó‡∏¢ (th-TH)</option>
          <option value='en-US'>English (en-US)</option>
        </select>
        <button onClick={readQuestion}>üîà ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</button>
        <button onClick={startMic}>{listening ? 'üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á' : 'üéôÔ∏è ‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö'}</button>
        <button onClick={() => aiDraftOne(current)} disabled={loading}>‚ú® ‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ</button>
        <button onClick={aiDraftAll} disabled={loading}>‚ö° ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</button>
      </div>

      <div style={{ border: '1px solid #ddd', borderRadius: 12, padding: 12 }}>
        {fields.map((f, i) => (
          <div key={f.id} style={{ marginBottom: 12, padding: 10, border: '1px solid #eee', borderRadius: 10, background: i === index ? '#f0f7ff' : '#fff' }}>
            <div style={{ fontSize: 12, color: '#666' }}>{i + 1}. {lang === 'th-TH' ? f.labelTH : f.labelEN}</div>
            <input
              value={answers[f.id]}
              placeholder={f.placeholder}
              onChange={(e) => setAnswers((p) => ({ ...p, [f.id]: e.target.value }))}
              onFocus={() => setIndex(i)}
              style={{ width: '100%', padding: 10, borderRadius: 8, border: '1px solid #ccc', marginTop: 6 }}
            />
            <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
              <button onClick={() => setIndex(i)}>üéØ ‡πÇ‡∏ü‡∏Å‡∏±‡∏™</button>
              <button onClick={() => speak(lang === 'th-TH' ? f.labelTH : f.labelEN)}>üîà ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå</button>
              <button onClick={() => aiDraftOne(f)} disabled={loading}>‚ú® ‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ</button>
            </div>
          </div>
        ))}
      </div>

      <div style={{ marginTop: 12, display: 'flex', gap: 8 }}>
        <button onClick={() => setIndex(Math.max(0, index - 1))}>‚¨ÖÔ∏è ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤</button>
        <div style={{ alignSelf: 'center' }}>‡∏Ç‡πâ‡∏≠ {index + 1} / {fields.length}</div>
        <button onClick={() => setIndex(Math.min(fields.length - 1, index + 1))}>‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‚û°Ô∏è</button>
      </div>

      <pre style={{ marginTop: 16, background: '#111', color: '#0f0', padding: 12, borderRadius: 8, maxHeight: 200, overflow: 'auto' }}>
        {JSON.stringify(answers, null, 2)}
      </pre>

      {loading && <div style={{ marginTop: 8, color: '#555' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ AI ‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‚Ä¶</div>}
    </div>
  );
}

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢/‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
// - ‡∏≠‡∏¢‡πà‡∏≤‡πÇ‡∏ä‡∏ß‡πå/‡∏ù‡∏±‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö ‡πÉ‡∏ä‡πâ server ‡πÄ‡∏õ‡πá‡∏ô proxy ‡πÄ‡∏™‡∏°‡∏≠
// - ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° System Prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô AI ‡∏ï‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß/‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö)
// - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á server ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô /api/submit)
// - ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Streaming ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: ‡πÉ‡∏ä‡πâ SSE ‡∏´‡∏£‡∏∑‡∏≠ WebSocket ‡∏ó‡∏µ‡πà‡∏ù‡∏±‡πà‡∏á server ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ token


// =============================================
//   Realtime Streaming ‚Äî SSE & WebSocket
// =============================================
// ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‚Äú‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‚Äù ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
// - ‡πÅ‡∏ö‡∏ö A: SSE (Server-Sent Events) ‚Äî ‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö HTTP
// - ‡πÅ‡∏ö‡∏ö B: WebSocket ‚Äî ‡∏™‡∏≠‡∏á‡∏ó‡∏≤‡∏á, latency ‡∏ï‡πà‡∏≥ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö/‡∏´‡∏¢‡∏∏‡∏î/‡∏Ç‡πâ‡∏≤‡∏° ‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô

// -------------------------------------------------
// A) SSE: server/server-sse.js
// -------------------------------------------------
import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3001;
const LLM_API_KEY = process.env.LLM_API_KEY;
const LLM_MODEL = process.env.LLM_MODEL || 'gpt-4o-mini';

// SSE endpoint
app.post('/api/ai/stream', async (req, res) => {
  try {
    const { prompt, system = 'You are a helpful assistant.', temperature = 0.7 } = req.body;

    // ‡∏ï‡∏±‡πâ‡∏á header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ LLM ‡πÅ‡∏ö‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á OpenAI Chat Completions)
    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LLM_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: LLM_MODEL,
        temperature,
        stream: true,
        messages: [
          { role: 'system', content: system },
          { role: 'user', content: prompt }
        ]
      })
    });

    if (!r.ok || !r.body) {
      res.write(`event: error
`);
      res.write(`data: ${JSON.stringify({ message: 'Upstream error' })}

`);
      return res.end();
    }

    const decoder = new TextDecoder('utf-8');
    const reader = r.body.getReader();

    let full = '';
    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      const chunk = decoder.decode(value, { stream: true });
      // ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏Ç‡∏≠‡∏á OpenAI ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "data: ..."
      for (const line of chunk.split('
')) {
        const trimmed = line.trim();
        if (!trimmed.startsWith('data:')) continue;
        const payload = trimmed.replace('data: ', '');
        if (payload === '[DONE]') {
          res.write(`event: done
`);
          res.write(`data: ${JSON.stringify({ text: full })}

`);
          return res.end();
        }
        try {
          const json = JSON.parse(payload);
          const delta = json.choices?.[0]?.delta?.content ?? '';
          if (delta) {
            full += delta;
            // ‡∏™‡πà‡∏á token ‡∏ó‡∏µ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡πâ client
            res.write(`event: token
`);
            res.write(`data: ${JSON.stringify({ delta })}

`);
          }
        } catch {}
      }
    }
  } catch (err) {
    res.write(`event: error
`);
    res.write(`data: ${JSON.stringify({ message: 'Server error' })}

`);
    res.end();
  }
});

app.listen(PORT, () => console.log(`SSE server on http://localhost:${PORT}`));


// -------------------------------------------------
// A) SSE: web/src/streamSSE.js (‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö)
// -------------------------------------------------
export function streamAI_SSE({ prompt, system, temperature = 0.7, onToken, onDone, onError }) {
  const controller = new AbortController();

  fetch('http://localhost:3001/api/ai/stream', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ prompt, system, temperature }),
    signal: controller.signal,
  }).then(async (resp) => {
    if (!resp.body) throw new Error('No body');
    // EventSource ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö POST ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏à‡∏∂‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡∏Å event ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
    const reader = resp.body.getReader();
    const decoder = new TextDecoder();
    let buf = '';

    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      buf += decoder.decode(value, { stream: true });
      // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á SSE (

)
      const parts = buf.split('

');
      buf = parts.pop() || '';
      for (const part of parts) {
        const lines = part.split('
');
        const first = lines[0] || '';
        const evt = first.startsWith('event:') ? first.replace('event: ', '') : 'message';
        const dataLine = lines.find(l => l.startsWith('data:')) || '';
        const data = dataLine.replace('data: ', '');
        if (evt === 'token') {
          try { const { delta } = JSON.parse(data); onToken?.(delta); } catch {}
        } else if (evt === 'done') {
          try { const { text } = JSON.parse(data); onDone?.(text); } catch { onDone?.(''); }
        } else if (evt === 'error') {
          try { const { message } = JSON.parse(data); onError?.(new Error(message)); } catch { onError?.(new Error('SSE error')); }
        }
      }
    }
  }).catch((e) => onError?.(e));

  return () => controller.abort(); // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ï‡∏£‡∏µ‡∏°
}


// -------------------------------------------------
// A) SSE: web/src/App.jsx (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏î‚Äù) 
// -------------------------------------------------
// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏ï‡∏£‡∏µ‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
import { streamAI_SSE } from './streamSSE';

function useStreamingField({ lang, currentField, answers, setAnswers, speak }) {
  const stopRef = useRef(null);

  const startStream = () => {
    const question = lang === 'th-TH' ? currentField.labelTH : currentField.labelEN;
    const system = lang === 'th-TH'
      ? '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏™‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1‚Äì2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î'
      : 'You are a concise assistant for filling forms.';

    let spokenBuf = '';
    stopRef.current = streamAI_SSE({
      prompt: question,
      system,
      onToken: (delta) => {
        setAnswers((p) => ({ ...p, [currentField.id]: (p[currentField.id] || '') + delta }));
        // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏ö‡∏ö buffer ‡∏ó‡∏µ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        spokenBuf += delta;
        if (/[.!?
]$/.test(spokenBuf)) { speak(spokenBuf); spokenBuf = ''; }
      },
      onDone: () => { if (spokenBuf.trim()) speak(spokenBuf); },
      onError: (e) => console.error('SSE error', e)
    });
  };

  const stopStream = () => {
    if (stopRef.current) { stopRef.current(); stopRef.current = null; }
  };

  return { startStream, stopStream };
}

// ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°:
// <button onClick={startStream}>üü¢ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏î (SSE)</button>
// <button onClick={stopStream}>‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î</button>


// -------------------------------------------------
// B) WebSocket: server/server-ws.js
// -------------------------------------------------
import 'dotenv/config';
import http from 'http';
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';
import { WebSocketServer } from 'ws';

const appWS = express();
appWS.use(cors());
appWS.use(express.json());

const server = http.createServer(appWS);
const wss = new WebSocketServer({ server, path: '/ws/ai' });

const LLM_API_KEY2 = process.env.LLM_API_KEY;
const LLM_MODEL2 = process.env.LLM_MODEL || 'gpt-4o-mini';

wss.on('connection', (ws) => {
  ws.on('message', async (raw) => {
    try {
      const { prompt, system = 'You are a helpful assistant.', temperature = 0.7 } = JSON.parse(raw.toString());

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å upstream ‡πÅ‡∏ö‡∏ö stream
      const r = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${LLM_API_KEY2}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: LLM_MODEL2,
          temperature,
          stream: true,
          messages: [
            { role: 'system', content: system },
            { role: 'user', content: prompt }
          ]
        })
      });

      if (!r.ok || !r.body) {
        ws.send(JSON.stringify({ type: 'error', message: 'Upstream error' }));
        return ws.close();
      }

      const decoder = new TextDecoder();
      const reader = r.body.getReader();

      ws.send(JSON.stringify({ type: 'start' }));
      let full = '';
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value, { stream: true });
        for (const line of chunk.split('
')) {
          const t = line.trim();
          if (!t.startsWith('data:')) continue;
          const payload = t.replace('data: ', '');
          if (payload === '[DONE]') { ws.send(JSON.stringify({ type: 'done', text: full })); ws.close(); return; }
          try {
            const json = JSON.parse(payload);
            const delta = json.choices?.[0]?.delta?.content ?? '';
            if (delta) { full += delta; ws.send(JSON.stringify({ type: 'delta', delta })); }
          } catch {}
        }
      }
    } catch (e) {
      ws.send(JSON.stringify({ type: 'error', message: 'ws error' }));
      ws.close();
    }
  });
});

const PORT_WS = process.env.PORT || 3001;
server.listen(PORT_WS, () => console.log(`WS server on ws://localhost:${PORT_WS}/ws/ai`));


// -------------------------------------------------
// B) WebSocket: web/src/streamWS.js (‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö)
// -------------------------------------------------
export function streamAI_WS({ prompt, system, temperature = 0.7, onDelta, onDone, onError }) {
  const ws = new WebSocket('ws://localhost:3001/ws/ai');

  ws.onopen = () => {
    ws.send(JSON.stringify({ prompt, system, temperature }));
  };

  ws.onmessage = (e) => {
    try {
      const msg = JSON.parse(e.data);
      if (msg.type === 'delta') onDelta?.(msg.delta);
      else if (msg.type === 'done') onDone?.(msg.text);
      else if (msg.type === 'error') onError?.(new Error(msg.message));
    } catch (err) {
      onError?.(err);
    }
  };

  ws.onerror = () => onError?.(new Error('ws error'));

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
  return () => { try { ws.close(); } catch {} };
}


// -------------------------------------------------
// B) WebSocket: web/src/App.jsx (‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö UI)
// -------------------------------------------------
import { streamAI_WS } from './streamWS';

function useWSField({ lang, currentField, answers, setAnswers, speak }) {
  const stopRef = useRef(null);

  const startWS = () => {
    const question = lang === 'th-TH' ? currentField.labelTH : currentField.labelEN;
    const system = lang === 'th-TH' ? '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°' : 'You are a helpful assistant.';
    let spoken = '';

    stopRef.current = streamAI_WS({
      prompt: question,
      system,
      onDelta: (d) => {
        setAnswers((p) => ({ ...p, [currentField.id]: (p[currentField.id] || '') + d }));
        spoken += d;
        if (/[.!?
]$/.test(spoken)) { speak(spoken); spoken = ''; }
      },
      onDone: (full) => { if (spoken.trim()) speak(spoken); },
      onError: (e) => console.error('WS error', e)
    });
  };

  const stopWS = () => { if (stopRef.current) { stopRef.current(); stopRef.current = null; } };
  return { startWS, stopWS };
}

// ‡πÉ‡∏ô UI ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°
// <button onClick={startWS}>üü£ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏î (WS)</button>
// <button onClick={stopWS}>‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î</button>


// ------------------ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ------------------
// 1) ‡∏ñ‡πâ‡∏≤ deploy ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS/HTTPS ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ WSS ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏•‡∏±‡∏á reverse proxy (‡πÄ‡∏ä‡πà‡∏ô Nginx)
// 2) ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‚Äú‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏ï‡∏£‡∏µ‡∏°‚Äù ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö AbortController (SSE) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å ws.close() (WebSocket) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏´‡∏¢‡∏∏‡∏î/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠
// 3) ‡πÄ‡∏û‡∏¥‡πà‡∏° guard ‡∏Å‡∏±‡∏ô prompt injection ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏ù‡∏±‡πà‡∏á server ‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏° PDPA/GDPR
// 4) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ï‡∏£‡∏µ‡∏°‡∏ï‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏• (‡πÅ‡∏ï‡πà pattern token/done ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô)

// =============================================================
//      LLM Provider‚ÄìAgnostic Backend (Streaming + Multi‚ÄëModel)
// =============================================================
// ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏™‡∏•‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• LLM ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏à‡πâ‡∏≤ (OpenAI‚Äëcompatible, Groq, Together, Fireworks,
// OpenRouter, ‡πÅ‡∏•‡∏∞ Local Ollama) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö
// -------------------------------------------------------------
// ‡πÇ‡∏Ñ‡∏£‡∏á‡πÑ‡∏ü‡∏•‡πå (server/)
//   .env
//   server-unified.js   ‚Üê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å provider ‡∏ú‡πà‡∏≤‡∏ô ENV
// -------------------------------------------------------------
// .env ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
// PROVIDER=openai          # openai | openrouter | groq | together | fireworks | ollama | custom
// MODEL=gpt-4o-mini        # ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
// API_KEY=xxxxxxxxxxxxxxxx
// API_BASE=                # ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ custom/endpoint ‡∏ó‡∏µ‡πà compatible (‡πÄ‡∏ä‡πà‡∏ô vLLM/self-hosted)
// PORT=3001
//
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
// - ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏à‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "OpenAI-compatible Chat Completions" ‡πÅ‡∏•‡πâ‡∏ß
//   ‡πÄ‡∏õ‡∏¥‡∏î stream:true ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SSE ‡πÄ‡∏õ‡πá‡∏ô data: {choices:[{delta:{content}}]} ‚Ä¶ [DONE]
// - Ollama ‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏™‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î data: ‚Ä¶ ‡πÑ‡∏î‡πâ)

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3001;
const PROVIDER = (process.env.PROVIDER || 'openai').toLowerCase();
const MODEL = process.env.MODEL || 'gpt-4o-mini';
const API_KEY = process.env.API_KEY || '';
const API_BASE = process.env.API_BASE || '';

// --------------------------
// Utils: write SSE frame
// --------------------------
function sseWrite(res, event, dataObj) {
  res.write(`event: ${event}\n`);
  res.write(`data: ${JSON.stringify(dataObj)}\n\n`);
}

// --------------------------
// Route: /api/ai/stream  (unified)
// --------------------------
app.post('/api/ai/stream', async (req, res) => {
  const { prompt, system = 'You are a helpful assistant.', temperature = 0.7, messages } = req.body;

  res.setHeader('Content-Type', 'text/event-stream');
  res.setHeader('Cache-Control', 'no-cache');
  res.setHeader('Connection', 'keep-alive');

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á messages (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å client)
  const chatMessages = messages && Array.isArray(messages) ? messages : [
    { role: 'system', content: system },
    { role: 'user', content: prompt }
  ];

  try {
    if (PROVIDER === 'ollama') {
      // ------------------ OLLAMA (Local) ------------------
      const base = API_BASE || 'http://localhost:11434';
      const r = await fetch(`${base}/api/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: MODEL,
          messages: chatMessages,
          stream: true,
          options: { temperature }
        })
      });
      if (!r.ok || !r.body) {
        sseWrite(res, 'error', { message: 'Ollama upstream error' });
        return res.end();
      }
      const reader = r.body.getReader();
      const decoder = new TextDecoder();
      let full = '';
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;
        const chunk = decoder.decode(value, { stream: true });
        for (const line of chunk.split('\n')) {
          const t = line.trim();
          if (!t.startsWith('{')) continue; // Ollama ‡∏™‡πà‡∏á JSON ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ "data:")
          try {
            const json = JSON.parse(t);
            const delta = json.message?.content || '';
            if (delta) {
              full += delta;
              sseWrite(res, 'token', { delta });
            }
            if (json.done) {
              sseWrite(res, 'done', { text: full });
              return res.end();
            }
          } catch {}
        }
      }
      return;
    }

    // -------- OpenAI‚Äëcompatible providers (OpenAI, OpenRouter, Groq, Together, Fireworks, custom) --------
    const base = API_BASE || (
      PROVIDER === 'openai' ? 'https://api.openai.com' :
      PROVIDER === 'openrouter' ? 'https://openrouter.ai' :
      PROVIDER === 'groq' ? 'https://api.groq.com' :
      PROVIDER === 'together' ? 'https://api.together.xyz' :
      PROVIDER === 'fireworks' ? 'https://api.fireworks.ai' :
      API_BASE // custom/self-hosted (‡πÄ‡∏ä‡πà‡∏ô vLLM)
    );

    const path = (PROVIDER === 'openrouter') ? '/api/v1/chat/completions' : '/v1/chat/completions';
    const url = `${base}${path}`;

    const headers = { 'Content-Type': 'application/json' };
    if (API_KEY) headers['Authorization'] = `Bearer ${API_KEY}`;
    if (PROVIDER === 'openrouter') headers['HTTP-Referer'] = 'http://localhost';

    const r = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify({
        model: MODEL,
        temperature,
        stream: true,
        messages: chatMessages
      })
    });

    if (!r.ok || !r.body) {
      sseWrite(res, 'error', { message: `Upstream error (${PROVIDER})` });
      return res.end();
    }

    const reader = r.body.getReader();
    const decoder = new TextDecoder();
    let full = '';
    while (true) {
      const { value, done } = await reader.read();
      if (done) break;
      const chunk = decoder.decode(value, { stream: true });
      for (const line of chunk.split('\n')) {
        const t = line.trim();
        if (!t.startsWith('data:')) continue;
        const payload = t.replace('data: ', '');
        if (payload === '[DONE]') {
          sseWrite(res, 'done', { text: full });
          return res.end();
        }
        try {
          const json = JSON.parse(payload);
          const delta = json.choices?.[0]?.delta?.content ?? '';
          if (delta) { full += delta; sseWrite(res, 'token', { delta }); }
        } catch {}
      }
    }
  } catch (err) {
    console.error(err);
    sseWrite(res, 'error', { message: 'Server error' });
    res.end();
  }
});

app.listen(PORT, () => {
  console.log(`Unified AI server on http://localhost:${PORT}`);
  console.log(`Provider=${PROVIDER} Model=${MODEL} Base=${API_BASE || '(default)'}\n`);
});

// -------------------------------------------------------------
// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å POST /api/ai/stream
// ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
// -------------------------------------------------------------

// -------------------------------------------
// (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) Field‚Äëlevel Guard / JSON Schema
// -------------------------------------------
// ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° validation ‡∏î‡πâ‡∏ß‡∏¢ schema ‡∏ï‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á prompt ‡πÄ‡∏ä‡πà‡∏ô:
//  - fullName: string (‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•)
//  - age: number (1‚Äì120) ‚Üí ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ post‚Äëprocess ‡πÅ‡∏õ‡∏•‡∏á/‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
//  - idCard: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
// ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á instruction ‡∏ï‡πà‡∏≠ field ‡πÑ‡∏õ‡∏¢‡∏±‡∏á system ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
//    "‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏´‡∏•‡∏±‡∏Å"

